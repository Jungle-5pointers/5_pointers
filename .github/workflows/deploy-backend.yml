name: Deploy Backend to AWS Elastic Beanstalk

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
  pull_request:
    types: [closed]
    branches: [main]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  deploy:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Build application
        run: |
          cd backend
          npm run build

      - name: Create .env file
        run: |
          cd backend
          echo "NODE_ENV=production" > .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_CALLBACK_URL=https://ddukddak.org/social-callback?provider=google" >> .env
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env
          echo "KAKAO_JS_KEY=${{ secrets.KAKAO_JS_KEY }}" >> .env
          echo "KAKAO_CALLBACK_URL=https://ddukddak.org/social-callback?provider=kakao" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN=1d" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_SYNCHRONIZE=true" >> .env
          echo "DB_LOGGING=false" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_S3_BUCKET_NAME=5pointers-imagebucket" >> .env
          echo "AWS_REGION=ap-northeast-2" >> .env
          
          echo "🔍 환경 변수 검증:"
          JWT_SECRET_VAL="${{ secrets.JWT_SECRET }}"
          if [ -z "$JWT_SECRET_VAL" ]; then
            echo "❌ JWT_SECRET이 설정되지 않았습니다!"
            exit 1
          else
            echo "✅ JWT_SECRET이 설정되어 있습니다. (길이: ${#JWT_SECRET_VAL})"
          fi

      - name: Create deployment package
        run: |
          cd backend
          zip -r ../backend-deployment.zip . -x "node_modules/*" "*.git*" "test/*" "coverage/*" "*.log"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: |
          aws s3 cp backend-deployment.zip s3://elasticbeanstalk-ap-northeast-2-490004614784/backend-deployment-${{ github.sha }}.zip

      - name: Create application version
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          RANDOM_ID=$(openssl rand -hex 4)
          VERSION_LABEL="v1.0-${TIMESTAMP}-${RANDOM_ID}"
          echo "VERSION_LABEL=${VERSION_LABEL}" >> $GITHUB_ENV
          
          # 기존 버전이 있다면 삭제 시도 (실패해도 계속 진행)
          aws elasticbeanstalk delete-application-version \
            --application-name jungle-backend-prod \
            --version-label v1.0-${{ github.sha }} \
            --delete-source-bundle || true
          
          aws elasticbeanstalk create-application-version \
            --application-name jungle-backend-prod \
            --version-label ${VERSION_LABEL} \
            --description "Deployment from GitHub Actions - ${{ github.sha }} at ${TIMESTAMP}" \
            --source-bundle S3Bucket=elasticbeanstalk-ap-northeast-2-490004614784,S3Key=backend-deployment-${{ github.sha }}.zip

      - name: Check Environment Status
        run: |
          echo "🔍 Checking Elastic Beanstalk environment status..."
          for i in {1..15}; do
            echo "Checking environment status (attempt $i/15)..."
            
            STATUS=$(aws elasticbeanstalk describe-environments \
              --environment-names Jungle-backend-prod-env \
              --query 'Environments[0].Status' \
              --output text)
            
            HEALTH=$(aws elasticbeanstalk describe-environments \
              --environment-names Jungle-backend-prod-env \
              --query 'Environments[0].Health' \
              --output text)
            
            echo "Status: $STATUS, Health: $HEALTH"
            
            if [ "$STATUS" = "Ready" ]; then
              echo "✅ Environment is ready for deployment"
              break
            else
              echo "⏳ Environment not ready. Status: $STATUS. Waiting 60 seconds..."
              if [ $i -eq 15 ]; then
                echo "❌ Environment failed to reach Ready state after 15 attempts (15 minutes)"
                echo "Current status: $STATUS"
                echo "Current health: $HEALTH"
                echo "📋 Recent events:"
                aws elasticbeanstalk describe-events \
                  --environment-name Jungle-backend-prod-env \
                  --max-items 5 \
                  --query 'Events[].[EventDate,Severity,Message]' \
                  --output table
                exit 1
              fi
              sleep 60
            fi
          done

      - name: Deploy to Elastic Beanstalk
        run: |
          echo "🚀 Starting deployment to Elastic Beanstalk..."
          aws elasticbeanstalk update-environment \
            --environment-name Jungle-backend-prod-env \
            --version-label ${{ env.VERSION_LABEL }}

      - name: Wait for deployment
        run: |
          echo "⏳ Waiting for deployment to complete..."
          timeout 1200 aws elasticbeanstalk wait environment-updated \
            --environment-name Jungle-backend-prod-env || {
            echo "❌ Deployment timeout after 20 minutes"
            echo "📋 Current environment status:"
            aws elasticbeanstalk describe-environments \
              --environment-names Jungle-backend-prod-env \
              --query 'Environments[0].{Status:Status,Health:Health,VersionLabel:VersionLabel}'
            echo "📋 Recent events:"
            aws elasticbeanstalk describe-events \
              --environment-name Jungle-backend-prod-env \
              --max-items 10 \
              --query 'Events[].[EventDate,Severity,Message]' \
              --output table
            exit 1
          }

      - name: Get deployment status
        run: |
          echo "✅ Deployment completed! Final status:"
          aws elasticbeanstalk describe-environments \
            --environment-names Jungle-backend-prod-env \
            --query 'Environments[0].{Status:Status,Health:Health,VersionLabel:VersionLabel}' \
            --output table
          
          # Health check
          HEALTH=$(aws elasticbeanstalk describe-environments \
            --environment-names Jungle-backend-prod-env \
            --query 'Environments[0].Health' \
            --output text)
          
          if [ "$HEALTH" = "Ok" ] || [ "$HEALTH" = "Info" ]; then
            echo "🎉 Deployment successful! Environment health: $HEALTH"
          else
            echo "⚠️ Deployment completed but environment health is: $HEALTH"
            echo "📋 Recent events:"
            aws elasticbeanstalk describe-events \
              --environment-name Jungle-backend-prod-env \
              --max-items 5 \
              --query 'Events[].[EventDate,Severity,Message]' \
              --output table
          fi
