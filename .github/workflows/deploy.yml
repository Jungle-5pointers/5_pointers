name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # 1단계: 코드 품질 검사
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test --if-present
      
    - name: Run linting
      run: npm run lint --if-present

  # 2단계: 빌드
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        app: [backend, editor, subdomain-nextjs]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build ${{ matrix.app }}
      run: |
        if [ -d "apps/${{ matrix.app }}" ]; then
          cd apps/${{ matrix.app }}
          npm install
          npm run build --if-present
        elif [ -d "${{ matrix.app }}" ]; then
          cd ${{ matrix.app }}
          npm install
          npm run build --if-present
        fi

  # 3단계: 배포 (main 브랜치만)
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🚀 Starting deployment..."
          
          # 프로젝트 디렉토리로 이동
          cd /home/ubuntu/5_pointers
          
          # 최신 코드 가져오기
          echo "📥 Pulling latest code..."
          git pull origin main
          
          # 의존성 설치
          echo "📦 Installing dependencies..."
          npm install
          
          # 각 앱별 의존성 설치 및 빌드
          echo "🔨 Building applications..."
          
          # Backend 빌드
          if [ -d "backend" ]; then
            cd backend
            npm install
            npm run build --if-present
            cd ..
          fi
          
          # Editor 빌드
          if [ -d "apps/editor" ]; then
            cd apps/editor
            npm install
            npm run build --if-present
            cd ../..
          fi
          
          # Subdomain Next.js 빌드
          if [ -d "apps/subdomain-nextjs" ]; then
            cd apps/subdomain-nextjs
            npm install
            npm run build --if-present
            cd ../..
          fi
          
          # 서비스 재시작
          echo "🔄 Restarting services..."
          pm2 restart all || {
            echo "Starting new PM2 processes..."
            pm2 start backend/dist/main.js --name "backend" || pm2 start backend/src/main.ts --name "backend"
            pm2 start apps/editor/package.json --name "editor"
            pm2 start apps/subdomain-nextjs/package.json --name "subdomain-nextjs"
          }
          
          # PM2 설정 저장
          pm2 save
          
          echo "✅ Deployment completed successfully!"
          
          # 배포 상태 확인
          echo "📊 Service status:"
          pm2 status
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi