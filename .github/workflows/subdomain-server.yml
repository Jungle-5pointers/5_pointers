name: Deploy Subdomain Server to AWS EC2

on:
  push:
    branches: [main]
    paths:
      - 'subdomain-server.js'
      - 'subdomain-proxy.js'
      - '.github/workflows/subdomain-server.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ap-northeast-2

      - name: Upload files and create deployment script
        run: |
          echo "📤 Uploading files to S3..."
          
          # S3에 서버 파일들 업로드
          aws s3 cp subdomain-server.js s3://elasticbeanstalk-ap-northeast-2-490004614784/auto-deploy/
          aws s3 cp subdomain-proxy.js s3://elasticbeanstalk-ap-northeast-2-490004614784/auto-deploy/
          
          # 자동 배포 스크립트 생성
          cat > auto-deploy.sh << 'SCRIPT'
          #!/bin/bash
          set -e
          
          echo "🚀 Auto deployment started at $(date)"
          cd /home/ec2-user
          
          # 파일 다운로드
          echo "📥 Downloading files..."
          aws s3 cp s3://elasticbeanstalk-ap-northeast-2-490004614784/auto-deploy/subdomain-server.js ./
          aws s3 cp s3://elasticbeanstalk-ap-northeast-2-490004614784/auto-deploy/subdomain-proxy.js ./
          
          # 기존 프로세스 종료
          echo "🔄 Stopping existing processes..."
          pkill -f subdomain-server || true
          pkill -f "node.*subdomain" || true
          sleep 3
          
          # Node.js 설치 확인
          if ! command -v node &> /dev/null; then
            echo "📦 Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # 앱 디렉토리 생성
          mkdir -p /opt/pagecube-subdomain
          cp subdomain-server.js /opt/pagecube-subdomain/
          cp subdomain-proxy.js /opt/pagecube-subdomain/
          cd /opt/pagecube-subdomain
          
          # package.json 생성
          cat > package.json << 'PKG'
          {
            "name": "subdomain-server",
            "version": "1.0.0",
            "main": "subdomain-server.js",
            "dependencies": {
              "express": "^4.18.2",
              "axios": "^1.6.0",
              "cors": "^2.8.5",
              "mysql2": "^3.6.0"
            }
          }
          PKG
          
          # 의존성 설치
          npm install --production
          
          # deployed-sites 디렉토리 생성
          mkdir -p deployed-sites
          
          # 환경변수 설정
          export NODE_ENV=production
          export PORT=3001
          
          # 서버 시작
          echo "🚀 Starting server..."
          nohup node subdomain-server.js > /var/log/subdomain-server.log 2>&1 &
          
          echo "✅ Server started with PID: $!"
          sleep 5
          
          # 서버 테스트
          if curl -f http://localhost:3001 >/dev/null 2>&1; then
            echo "✅ Server is responding on port 3001"
            echo "🎉 Deployment completed successfully at $(date)"
          else
            echo "❌ Server is not responding"
            echo "📋 Check logs: tail -f /var/log/subdomain-server.log"
            exit 1
          fi
          SCRIPT
          
          # S3에 배포 스크립트 업로드
          aws s3 cp auto-deploy.sh s3://elasticbeanstalk-ap-northeast-2-490004614784/auto-deploy.sh
          
          echo "✅ Files uploaded to S3"

      - name: Restart EC2 instance with deployment
        run: |
          # 인스턴스 ID 가져오기
          INSTANCE_ID=$(aws ec2 describe-instances \
            --region ap-northeast-2 \
            --filters "Name=tag:Name,Values=PageCube-Subdomain-Simple" "Name=instance-state-name,Values=running" \
            --query 'Reservations[].Instances[].InstanceId' \
            --output text)
          
          if [ -z "$INSTANCE_ID" ]; then
            echo "❌ Instance not found"
            exit 1
          fi
          
          echo "✅ Found instance: $INSTANCE_ID"
          
          # User Data 스크립트 생성 (간단한 형태)
          USER_DATA_SCRIPT='#!/bin/bash
          exec > /var/log/user-data.log 2>&1
          cd /home/ec2-user
          aws s3 cp s3://elasticbeanstalk-ap-northeast-2-490004614784/auto-deploy.sh ./
          chmod +x auto-deploy.sh
          sudo -u ec2-user ./auto-deploy.sh'
          
          # Base64 인코딩 (개행 문자 제거)
          USER_DATA_B64=$(printf '%s' "$USER_DATA_SCRIPT" | base64 | tr -d '\n')
          
          echo "🔄 Restarting instance with deployment script..."
          
          # 인스턴스 중지
          aws ec2 stop-instances --instance-ids $INSTANCE_ID --region ap-northeast-2
          aws ec2 wait instance-stopped --instance-ids $INSTANCE_ID --region ap-northeast-2
          
          # User Data 설정
          aws ec2 modify-instance-attribute \
            --instance-id $INSTANCE_ID \
            --user-data "$USER_DATA_B64" \
            --region ap-northeast-2
          
          # 인스턴스 시작
          aws ec2 start-instances --instance-ids $INSTANCE_ID --region ap-northeast-2
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ap-northeast-2
          
          echo "✅ Instance restarted successfully"

      - name: Update DNS and Health Check
        run: |
          # 새 IP 주소 가져오기
          NEW_IP=$(aws ec2 describe-instances \
            --region ap-northeast-2 \
            --filters "Name=tag:Name,Values=PageCube-Subdomain-Simple" "Name=instance-state-name,Values=running" \
            --query 'Reservations[].Instances[].PublicIpAddress' \
            --output text)
          
          echo "🌐 New IP address: $NEW_IP"
          
          # DNS 업데이트
          echo "🔄 Updating DNS..."
          aws route53 change-resource-record-sets \
            --hosted-zone-id Z0193893QRN4IUT309BL \
            --change-batch '{
              "Changes": [{
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "*.pagecube.net",
                  "Type": "A",
                  "TTL": 300,
                  "ResourceRecords": [{"Value": "'$NEW_IP'"}]
                }
              }]
            }' > /dev/null
          
          echo "✅ DNS updated: *.pagecube.net → $NEW_IP"
          
          # 헬스체크 (2분 대기)
          echo "⏳ Waiting 2 minutes for deployment to complete..."
          sleep 120
          
          # 헬스체크 시도
          echo "🔍 Performing health checks..."
          for i in {1..10}; do
            echo "🔍 Health check attempt $i/10..."
            
            if curl -f --connect-timeout 10 --max-time 30 http://$NEW_IP:3001 >/dev/null 2>&1; then
              echo "✅ Health check passed!"
              echo ""
              echo "🎉 Deployment completed successfully!"
              echo "🌐 Subdomain server is running: http://$NEW_IP:3001"
              echo "🔗 Test subdomain: curl -H 'Host: 4asd.pagecube.net' http://$NEW_IP:3001"
              echo "🌍 Live test: https://4asd.pagecube.net"
              exit 0
            fi
            
            echo "⏳ Attempt $i failed, retrying in 15 seconds..."
            sleep 15
          done
          
          echo "❌ Health check failed after 10 attempts"
          echo "📋 Check EC2 logs: /var/log/user-data.log and /var/log/subdomain-server.log"
          exit 1

      - name: Cleanup
        if: always()
        run: |
          rm -f auto-deploy.sh
